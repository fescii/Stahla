services:
  api:
    build: . # Assumes Dockerfile is in the root directory
    container_name: stahla_api
    restart: always
    volumes:
      - ./app:/code/app # Mount the app directory to the new location
      - ./assets:/code/app/assets # Mount assets relative to the new app location
      - ./info:/code/app/info # Mount info relative to the new app location
      - ./docs:/code/static_docs # Mount the docs directory into the container
    env_file:
      - .env # Load environment variables from .env file
    environment:
      # Override the connection settings to use container names
      MONGO_HOST: mongo
      REDIS_URL: redis://redis:6379/0
      # Database credentials must match those in MongoDB container
      MONGO_USER: ${MONGO_USER:-stahla_app}
      MONGO_PASSWORD: ${MONGO_PASSWORD:-app_password}
      MONGO_DB_NAME: ${MONGO_DB_NAME:-stahla_dashboard}
    # Command to run the FastAPI app using Uvicorn with reload
    # Use app.main:app as the target, matching the new structure
    command:
      [
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--reload",
      ]
    depends_on:
      - mongo
      - redis

  mongo:
    image: mongo:latest
    container_name: stahla_mongo
    restart: always
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      # MongoDB root user credentials
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-mongoadmin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-secret}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-stahla_dashboard}
      # App-specific MongoDB credentials for the application user
      MONGO_USER: ${MONGO_USER:-stahla_app}
      MONGO_PASSWORD: ${MONGO_PASSWORD:-app_password}
      MONGO_DB_NAME: ${MONGO_DB_NAME:-stahla_dashboard}
    volumes:
      - mongo_data:/data/db # Persist data
      - ./mongo-init:/docker-entrypoint-initdb.d # MongoDB init scripts (will execute .sh and .js files)
    command: ["--auth"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis:
    image: redis:alpine
    container_name: stahla_redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build: ./nginx
    container_name: stahla_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./app/static:/usr/share/nginx/html/static
      - ./nginx/nginx.config:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
    environment:
      - APP_BASE_URL=${APP_BASE_URL:-http://localhost:8000}
      - API_V1_STR=${API_V1_STR:-/api/v1}
    # Optional: Add a healthcheck
    # healthcheck:
    #   test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    #   interval: 10s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 40s

# You can add other services like databases, Redis, etc. here if needed
# Example for a PostgreSQL database:
#  db:
#    image: postgres:15
#    container_name: stahla_db
#    volumes:
#      - postgres_data:/var/lib/postgresql/data/
#    environment:
#      POSTGRES_USER: user
#      POSTGRES_PASSWORD: password
#      POSTGRES_DB: stahla_db
#    ports:
#      - "5432:5432"

volumes:
  mongo_data: # MongoDB data persistence
  redis_data: # Redis data persistence
