version: '3.9' # Or a version compatible with your Docker installation

services:
  api:
    build: . # Assumes Dockerfile is in the root directory
    container_name: stahla_api
    ports:
      - "8000:8000" # Map host port 8000 to container port 8000
    volumes:
      - ./app:/code/app # Mount the app directory to the new location
      - ./assets:/code/app/assets # Mount assets relative to the new app location
      - ./info:/code/app/info # Mount info relative to the new app location
      - ./docs:/static_docs # Mount the docs directory into the container
    env_file:
      - .env # Load environment variables from .env file
    # Command to run the FastAPI app using Uvicorn with reload
    # Use app.main:app as the target, matching the new structure
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    depends_on:
      - mongo # Add dependency on mongo

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      # Use renamed variables from .env for initial root user setup
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-mongoadmin} # Use new var name
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-secret} # Use new var name
    volumes:
      - mongo_data:/data/db # Persist data
    # Optional: Add a healthcheck
    # healthcheck:
    #   test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    #   interval: 10s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 40s

# You can add other services like databases, Redis, etc. here if needed
# Example for a PostgreSQL database:
#  db:
#    image: postgres:15
#    container_name: stahla_db
#    volumes:
#      - postgres_data:/var/lib/postgresql/data/
#    environment:
#      POSTGRES_USER: user
#      POSTGRES_PASSWORD: password
#      POSTGRES_DB: stahla_db
#    ports:
#      - "5432:5432"

volumes:
  mongo_data: # Add mongo_data volume definition
